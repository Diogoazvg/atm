c
last_balance[:error]
c
inverse_notes
inverse_notes[k]
c
notes_values
c
@deposit
@deposit.last_balance[:error] << 'caixa-em-uso'
@deposit
c
@deposit
@deposit.last_balance[:error] << 'caixa-em-uso'
@deposit.last_balance[:error]
c
@deposit.banknotes[:caixa][:erros]
@deposit.banknotes[:erros]
@deposit.banknotes[:'erros']
@deposit.banknotes[:erros].class
@deposit.banknotes
@deposit.banknotes[:erros]
@deposit.banknotes
error
c
error
c
data.keys == [:caixa]
operation.deposit_operation(parse_data_deposit(data))
data
operation
c
data
c
_data
c
data.keys == [:caixa]
data.keys[:caixa]
data
c
@deposit
operation
@deposit.last_balance[:status_machine]
c
@deposit.last_balance[:status_machine]
c
@deposit.last_balance[:status_machine]
c
@deposit.last_balance[:status_machine] == true
@deposit.last_balance
@deposit.last_balance[:status_machine]
c
sum_deposit
c
@deposit.backend_banknotes
sum_deposit
c
@banknotes
@banknotes = {:"100"=>0, :"50"=>97, :"20"=>0, :"10"=>2}
@banknotes {:"100"=>0, :"50"=>97, :"20"=>0, :"10"=>2}
@banknotes
c
backend_banknotes.except(:status_machine)
backend_banknotes.except[:status_machine]
backend_banknotes = {
      status_machine:,
      "10": notes[:ten_notes],
      "20": notes[:twenty_notes],
      "50": notes[:fifty_notes],
      "100": notes[:hundred_notes]
    }
backend_banknotes.except[:status_machine]
c
backend_banknotes.except[:status_machine]
c
backend_banknotes.except[:status_machine]
backend_banknotes[:'100']
backend_banknotes[:100]
backend_banknotes[:status_machine]
backend_banknotes.class
backend_banknotes.except[:'100']
backend_banknotes.except[:status_machine]
backend_banknotes
backend_banknotes.except[:status_machine]
c
machine
c
machine
machine.last_balance
c
machine
machine.last_balance
@banknotes
c
inverse_notes
c
last_withdraw[:withdraw][:time]
last_withdraw
last_withdraw[:time].to_time
Time.current.time
Time.current
c
last_withdraw.empty?
last_withdraw.nil?
last_withdraw
c
@deposit.last_withdraw
last_withdraw
c
duplicated_value?(request)
deadline?
c
deadline?(last_withdraw)
deadline?(withdraw)
c
@deposit
Withdraw.new.execute(request, @deposit)
@deposit
c
@deposit
c
@deposit.last_withdraw
@deposit
Withdraw.new.execute(request, @deposit)
c
machine.last_withdraw = request
c
Withdraw.new.execute(request, @deposit)
@deposit
c
machine
machine.last_withdraw = request
machine.last_withdraw
c
machine.last_withdraw
c
machine.last_withdraw = request
 machine[:last_withdraw] = request
machine
request
c
machine
machine[:last_withdraw] = request
@last_withdraw = request
request
save_last_withdraw(request, machine)
last_withdraw
duplicated_withdraw?(request, last_withdraw)
@banknotes = machine.backend_banknotes
machine.backend_banknotes
machine
c
Withdraw.new.execute(request, @deposit)
c
operation
last_withdraw
c
last_withdraw
c
n
last_withdraw
n
last_withdraw
n
duplicated_withdraw?(request, last_withdraw)
request
last_withdraw
c
withdraw
c
withdraw
deadline?(withdraw)
c
duplicated_value?(request, withdraw)
c
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) < 10.minutes
c
duplicated_value?(request, withdraw)
deadline?(withdraw)
c
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) < 10.minutes
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) > 10.minutes
deadline?(withdraw)
deadline?(withdraw) && duplicated_value?(request, withdraw)
c
withdraw.last_withdraw[:withdraw][:amount] == request[:withdraw][:amount]
withdraw.last_withdraw[:withdraw][:amount]
withdraw
c
deadline?(withdraw) && duplicated_value?(request, withdraw)
c
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) > 10.minutes
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) < 10.minutes
withdraw.last_withdraw[:withdraw][:time].to_time
Time.current.time
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) < 10.minutes
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) > 10.minutes
c
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) > 10.minutes
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) < 10.minutes
(Time.current - withdraw.last_withdraw[:withdraw][:time].to_time) > 10.minutes
withdraw.last_withdraw[:withdraw][:time].to_time
Time.current.time
Time.current - withdraw.last_withdraw[:withdraw][:time].to_time
Time.current.time
withdraw.last_withdraw[:withdraw][:time].to_time
deadline?(withdraw)
c
Time.current.time
Time.current
withdraw.last_withdraw[:withdraw][:time].to_time
deadline?(withdraw)
c
(Time.current - '2024-01-08 00:9:01 +0000'.to_time) > 10.minutes
(Time.current - '2024-01-08 00:10:01 +0000'.to_time) > 10.minutes
Time.current.time
(Time.current - '2024-01-08 00:08:01 +0000'.to_time) > 10.minutes
Time.current.time
(Time.current - '2024-01-08 00:13:01 +0000'.to_time) > 10.minutes
(Time.current - '2024-13-08 00:01:01 +0000'.to_time) > 10.minutes
(Time.current - '2024-01-08 00:01:01 +0000'.to_time) > 10.minutes
(Time.current - 2024-01-08 00:01:01 +0000'.to_time) > 10.minutes
(Time.current' - 2024-01-08 00:01:01 +0000'.to_time) > 10.minutes
Time.current.time
('2024-01-08 00:01:01 +0000'.to_time - Time.current) > 10.minutes
('2024-01-08 00:01:01 +0000'.to_time - Time.current) < 10.minutes
('2024-01-08 00:13:01 +0000'.to_time - Time.current) < 10.minutes
('2024-01-08 00:13:01 +0000'.to_time < Time.current) < 10.minutes
'2024-01-08 00:15:01 +0000'.to_time < Time.current
Time.current.time
'2024-01-08 00:13:01 +0000'.to_time < Time.current
Time.current.time
Time.current
'2019-02-13 11:01:01 +0000'.to_time
2019-02-13 11:01:01 +0000
withdraw.last_withdraw[:withdraw][:time].to_time - Time.now < 10.minutes
withdraw.last_withdraw[:withdraw][:time].to_time - Time.now
withdraw.last_withdraw[:withdraw][:time].to_time - Time.current
Time.current
Current.now
Time.now
withdraw.last_withdraw[:withdraw][:time].to_time - 10.minutes
withdraw.last_withdraw[:withdraw][:time].to_time.class
withdraw.last_withdraw[:withdraw][:time].to_time
withdraw.last_withdraw[:withdraw][:time]
withdraw.last_withdraw
withdraw
c
withdraw
withdraw.last_withdraw
c
wt.withdraw
wt.execute(request, @deposit.backend_banknotes)
wt.withdraw
wt.last_withdraw
wt = Withdraw.new
